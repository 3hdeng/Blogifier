@inject IJsonStringLocalizer<BlogSettings> Localizer
@inject IDataService DataService
@inject IStorageService StorageService
@inject Sotsera.Blazor.Toaster.IToaster Toaster
@inject IOptions<JsonLocalizationOptions> Options
@inject IJSRuntime JSRuntime

@if (Model != null)
{
    <div class="card">
        <div class="card-body">
            <EditForm Model="@Model" OnValidSubmit="SaveBlogSettings">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <fieldset>
                    <div>
                        <label>@Localizer["title"]</label>
                        <input type="text" @bind="Model.Title" name="title" />
                    </div>
                    <div>
                        <label>@Localizer["description"]</label>
                        <input type="text" @bind="Model.Description" name="description" />
                    </div>
                    <div>
                        <label>@Localizer["items-per-page"]</label>
                        <input type="text" @bind="Model.ItemsPerPage" name="pageitems" />
                    </div>
                    <div class="custom-control custom-switch">
                        <input type="checkbox" @bind="Model.IncludeFeatured" class="custom-control-input" id="switch1">
                        <label class="custom-control-label" for="switch1">@Localizer["include-featured"]</label>
                    </div>
                    <div class="input-group">
                        <label>@Localizer["logo"]</label>
                        <input type="text" class="form-control txt-upload" @bind="Model.Logo" name="logo" id="logo" readonly="" />
                        <span class="input-group-btn">
                            <button class="btn btn-secondary btn-upload" onclick="return fileManager.uploadClick('@UploadType.AppLogo');" type="button"> @Localizer["select"]</button>
                        </span>
                    </div>
                    <div class="input-group">
                        <label>@Localizer["cover"]</label>
                        <input type="text" class="form-control txt-upload" @bind="Model.Cover" name="cover" id="cover" readonly="" />
                        <span class="input-group-btn">
                            <button class="btn btn-secondary btn-upload" onclick="return fileManager.uploadClick('@UploadType.AppCover');" type="button"> @Localizer["select"]</button>
                        </span>
                    </div>
                    <div class="input-group">
                        <label>@Localizer["language"]</label>
                        <select @bind="Model.Culture">
                            @if (Cultures != null)
                            {
                                @foreach (var culture in Cultures)
                                {
                                    <option value="@culture.Value">@culture.Text</option>
                                }
                            }
                        </select>
                    </div>
                    <div>
                        <label>&nbsp;</label>
                        <input type="submit" value="@Localizer["save"]" class="btn btn-primary" />
                    </div>
                </fieldset>
            </EditForm>
        </div>
    </div>
}

@code {
    protected BlogItem Model { get; set; }
    protected List<SelectListItem> Cultures { get; set; }
    protected List<SelectListItem> Themes { get; set; }
    private string CurrentCulture { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Cultures = Options.Value.SupportedCultureInfos
            .Select(c => new SelectListItem { Value = c.Name, Text = c.DisplayName })
            .ToList();

        Themes = new List<SelectListItem>();
        foreach (var theme in StorageService.GetThemes())
        {
            Themes.Add(new SelectListItem { Value = theme, Text = theme.Capitalize() });
        }

        Model = await DataService.CustomFields.GetBlogSettings();
        CurrentCulture = Model.Culture;
    }

    protected async Task SaveBlogSettings()
    {
        await DataService.CustomFields.SaveBlogSettings(Model);

        if (Model.Culture != CurrentCulture)
        {
            var cookieValue = CookieRequestCultureProvider.MakeCookieValue(new RequestCulture(Model.Culture));
            cookieValue = cookieValue.Replace("=", "%3D").Replace("|", "%7C");

            var test = await JSRuntime.InvokeAsync<string>(
                "commonJsFunctions.writeCookie",
                CookieRequestCultureProvider.DefaultCookieName,
                cookieValue,
                365
            );
        }

        Toaster.Success("Saved");
    }

    protected void Uploaded()
    {
        StateHasChanged();
        Toaster.Success("Saved");
    }
}
