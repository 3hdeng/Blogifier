@using Askmethat.Aspnet.JsonLocalizer.Localizer
@using Blogifier.Core
@using Blogifier.Core.Api
@using Blogifier.Core.Data
@using Blogifier.Core.Data.Models
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity
@using Microsoft.FeatureManagement
@using Sotsera.Blazor.Toaster
@using System
@using System.Collections.Generic
@using System.Threading.Tasks

@inject CustomHttpClient Http
@inject IHttpContextAccessor HttpContextAccessor

@inject IJsonStringLocalizer<ProfileWidget> Localizer
@inject IToaster Toaster
@inject SignInManager<AppUser> SignInManager
@inject UserManager<AppUser> UserManager
@inject NavigationManager NavigationManager
@inject IFeatureManager FeatureManager

@if (Author != null)
{
<div class="app-widget app-widget-profile d-flex">
    <img id="profile-avatar" width="128" src="@Author.Avatar" class="widget-profile-avatar rounded-circle mr-5" alt="@Author.DisplayName">
    <div class="widget-profile-info">
        <h4 class="widget-profile-name">@Author.DisplayName</h4>
        <p class="widget-profile-email">@Author.Email</p>
        <button class="btn btn-primary" @onclick="ShowEditor">Edit Profile</button>
    </div>
</div>
}


@if (Edit)
{
    <div class="editor-modal-bg">
        <div class="editor-modal-content">

            <div class="modal-actions">
                <ul class="nav nav-tabs" id="post-edit-tabs" role="tablist">
                    <li class="nav-item">
                        <a class="nav-link active" id="home-tab" data-toggle="tab" href="#home" role="tab" aria-controls="home" aria-selected="true">@Localizer["profile"]</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" id="social-tab" data-toggle="tab" href="#social" role="tab" aria-controls="social" aria-selected="false">@Localizer["social-accounts"]</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" id="profile-tab" data-toggle="tab" href="#profile" role="tab" aria-controls="profile" aria-selected="false">@Localizer["change-password"]</a>
                    </li>
                </ul>
                <div class="btn-group post-options" role="group" aria-label="Post options">
                    <button class="btn btn-secondary" @onclick="HideEditor">
                        <span class="oi oi-x"></span>
                    </button>
                </div>
            </div>

            <div class="modal-profile">

                <div class="tab-content" id="myTabContent">
                    <div class="tab-pane fade show active" id="home" role="tabpanel" aria-labelledby="home-tab">
                        <EditForm Model="@Author" OnValidSubmit="Save">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <fieldset>
                                <div>
                                    <label>@Localizer["user-name"]</label>
                                    <input type="text" @bind="Author.DisplayName" name="display-name" />
                                </div>
                                <div>
                                    <label>@Localizer["email"]</label>
                                    <input type="text" @bind="Author.Email" name="e-mail" />
                                </div>
                                <div>
                                    <label>@Localizer["user-bio"]</label>
                                    <textarea class="form-control" rows="3" @bind="Author.Bio" name="bio" />
                                </div>
                                <div class="input-group">
                                    <label>@Localizer["avatar"]</label>
                                    <input type="text" class="form-control txt-upload" @bind="Author.Avatar" name="avatar" id="avatar" readonly="" />
                                    <span class="input-group-btn">
                                        <button class="btn btn-secondary btn-upload" onclick="return fileManager.uploadClick('@UploadType.Avatar');" type="button"> @Localizer["select"]</button>
                                    </span>
                                </div>
                                <div class="input-group save-profile">
                                    <button type="submit" class="btn btn-primary btn-main">@Localizer["save"]</button>
                                </div>
                            </fieldset>
                        </EditForm>
                    </div>

                    <div class="tab-pane fade" id="social" role="tabpanel" aria-labelledby="social-tab">
                        <SocialAdminWidget Level="author" />
                    </div>

                    <div class="tab-pane fade" id="profile" role="tabpanel" aria-labelledby="profile-tab">
                        <EditForm Model="@PwdModel" OnValidSubmit="ChangePwd">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <fieldset>
                                <div>
                                    <label>@Localizer["password"]</label>
                                    <input class="form-control" type="password" @bind="PwdModel.OldPassword" />
                                </div>
                                <div>
                                    <label>@Localizer["new-password"]</label>
                                    <input class="form-control" type="password" @bind="PwdModel.NewPassword" />
                                </div>
                                <div>
                                    <label>@Localizer["confirm-password"]</label>
                                    <input class="form-control" type="password" @bind="PwdModel.ConfirmPassword" />
                                </div>
                                <button type="submit" class="btn btn-primary btn-main">@Localizer["save"]</button>
                            </fieldset>
                        </EditForm>
                    </div>
                </div>

            </div>

        </div>
    </div>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    protected Author Author { get; set; }
    protected IEnumerable<CustomField> UserFields { get; set; }
    protected CustomField CurrentField { get; set; }
    protected bool Edit { get; set; }
    protected ChangePasswordModel PwdModel { get; set; }
    protected HttpRequest Request { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Request = HttpContextAccessor.HttpContext.Request;
        await Load();
    }

    public async Task Load()
    {
        var authState = await AuthenticationStateTask;

        if (authState == null || !authState.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("account/login?returnUrl=/admin");
        }

        Author = await Http.GetJsonAsync<Author>($"authors/{authState.User.Identity.Name}", Request);

        PwdModel = new ChangePasswordModel
        {
            UserName = authState.User.Identity.Name
        };

        CurrentField = new CustomField { AuthorId = Author.Id, Name = "", Content = "" };
        UserFields = await Http.GetJsonAsync<IEnumerable<CustomField>>($"customfields/listbyid/{Author.Id}", Request);
    }

    protected async Task Save()
    {
        try
        {
            await Http.PutJsonAsync($"authors/update", Request, Author);
            Toaster.Success("Saved");
        }
        catch (Exception ex)
        {
            Toaster.Error(ex.Message);
        }
    }

    protected async Task SaveCustom()
    {
        if (string.IsNullOrEmpty(CurrentField.Name) || string.IsNullOrEmpty(CurrentField.Content))
        {
            Toaster.Error("Name and content required");
        }
        else
        {
            try
            {
                //var existing = DataService.CustomFields.Single(
                //    f => f.AuthorId == Author.Id && f.Name == CurrentField.Name);

                //if (existing == null)
                //{
                //    DataService.CustomFields.Add(CurrentField);
                //    DataService.Complete();
                //    CurrentField = new CustomField { AuthorId = Author.Id, Name = "", Content = "" };
                //}
                var msg = await Http.PostJsonAsync($"authors/update", Request, CurrentField);
                Toaster.Success(Localizer["completed"]);
            }
            catch (Exception ex)
            {
                Toaster.Error(ex.Message);
            }
        }
    }

    protected void RemoveField(int id)
    {
        //var existing = DataService.CustomFields.Single(f => f.Id == id);
        //if (existing != null)
        //{
        //    DataService.CustomFields.Remove(existing);
        //    DataService.Complete();
        //    Toaster.Success(Localizer["completed"]);
        //    CurrentField = new CustomField { AuthorId = Author.Id, Name = "", Content = "" };
        //    UserFields = DataService.CustomFields.Find(f => f.AuthorId == Author.Id);
        //}
        //else
        //{
        //    Toaster.Error($"Error removing field #{id}");
        //}
    }

    protected async Task ChangePwd()
    {
        try
        {
            if (FeatureManager.IsEnabledAsync(nameof(AppFeatureFlags.DemoMode)).Result)
            {
                Toaster.Error("Running in demo mode - change password disabled");
            }
            else
            {
                var authState = await AuthenticationStateTask;
                var user = await UserManager.GetUserAsync(authState.User);
                var result = await UserManager.ChangePasswordAsync(user, PwdModel.OldPassword, PwdModel.NewPassword);

                if (!result.Succeeded)
                {
                    Toaster.Error("Error changing password");
                }
                else
                {
                    Toaster.Success(Localizer["saved"]);
                }
            }
        }
        catch (Exception ex)
        {
            Toaster.Error(ex.Message);
        }
    }

    protected void ShowEditor()
    {
        Edit = true;
        StateHasChanged();
    }

    protected async Task HideEditor()
    {
        Edit = false;
        await Load();
        StateHasChanged();
    }

}