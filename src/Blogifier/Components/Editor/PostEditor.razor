@using Microsoft.AspNetCore.WebUtilities

@inject IJsonStringLocalizer<PostEditor> Localizer
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IToaster Toaster
@inject INewsletterService NewsletterService

@inject IHttpContextAccessor HttpContextAccessor
@inject CustomHttpClient Http

@if (Post != null)
{
    <div class="app-editor-header">
        <div class="app-editor-container d-flex">
            @if (Post != null)
            {
                <div class="app-editor-title">
                    <input type="text" class="form-control" @bind="Post.Title" name="title" placeholder="@Localizer["post-title"]" autocomplete="off" autofocus />
                </div>
            }
            <div class="app-editor-actions d-flex">
                @if (Post.Id > 0)
                {
                    <button class="btn btn-icon btn-gray" @onclick="(() => Remove(Post.Id))" title="@Localizer["delete"]">
                        <svg class="bi bi-trash" width="1em" height="1em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                            <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z" />
                            <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z" />
                        </svg>
                    </button>
                }
                <button type="button" class="btn btn-icon btn-gray" data-toggle="modal" data-target="#detailsModal" title="@Localizer["settings"]">
                    <svg class="bi bi-gear" width="1em" height="1em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M8.837 1.626c-.246-.835-1.428-.835-1.674 0l-.094.319A1.873 1.873 0 0 1 4.377 3.06l-.292-.16c-.764-.415-1.6.42-1.184 1.185l.159.292a1.873 1.873 0 0 1-1.115 2.692l-.319.094c-.835.246-.835 1.428 0 1.674l.319.094a1.873 1.873 0 0 1 1.115 2.693l-.16.291c-.415.764.42 1.6 1.185 1.184l.292-.159a1.873 1.873 0 0 1 2.692 1.116l.094.318c.246.835 1.428.835 1.674 0l.094-.319a1.873 1.873 0 0 1 2.693-1.115l.291.16c.764.415 1.6-.42 1.184-1.185l-.159-.291a1.873 1.873 0 0 1 1.116-2.693l.318-.094c.835-.246.835-1.428 0-1.674l-.319-.094a1.873 1.873 0 0 1-1.115-2.692l.16-.292c.415-.764-.42-1.6-1.185-1.184l-.291.159A1.873 1.873 0 0 1 8.93 1.945l-.094-.319zm-2.633-.283c.527-1.79 3.065-1.79 3.592 0l.094.319a.873.873 0 0 0 1.255.52l.292-.16c1.64-.892 3.434.901 2.54 2.541l-.159.292a.873.873 0 0 0 .52 1.255l.319.094c1.79.527 1.79 3.065 0 3.592l-.319.094a.873.873 0 0 0-.52 1.255l.16.292c.893 1.64-.902 3.434-2.541 2.54l-.292-.159a.873.873 0 0 0-1.255.52l-.094.319c-.527 1.79-3.065 1.79-3.592 0l-.094-.319a.873.873 0 0 0-1.255-.52l-.292.16c-1.64.893-3.433-.902-2.54-2.541l.159-.292a.873.873 0 0 0-.52-1.255l-.319-.094c-1.79-.527-1.79-3.065 0-3.592l.319-.094a.873.873 0 0 0 .52-1.255l-.16-.292c-.892-1.64.902-3.433 2.541-2.54l.292.159a.873.873 0 0 0 1.255-.52l.094-.319z" />
                        <path fill-rule="evenodd" d="M8 5.754a2.246 2.246 0 1 0 0 4.492 2.246 2.246 0 0 0 0-4.492zM4.754 8a3.246 3.246 0 1 1 6.492 0 3.246 3.246 0 0 1-6.492 0z" />
                    </svg>
                </button>
                @if (Post.Id == 0)
                {
                    <button type="button" class="btn btn-gray" @onclick="() => Save()" @onclick:preventDefault>@Localizer["save"]</button>
                    <button type="button" class="btn btn-brand" @onclick="() => Publish()">@Localizer["publish"]</button>
                }
                else
                {
                    if (Post.Published > DateTime.MinValue)
                    {
                        <button type="button" class="btn btn-gray" @onclick="() => Unpublish()" @onclick:preventDefault>@Localizer["unpublish"]</button>
                        <button type="button" class="btn btn-brand" @onclick="() => Save()">@Localizer["save"]</button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-gray" @onclick="() => Save()" @onclick:preventDefault>@Localizer["save"]</button>
                        <button type="button" class="btn btn-brand" @onclick="() => Publish()">@Localizer["publish"]</button>
                    }
                }
            </div>
        </div>
    </div>

    <MarkdownEditor Content="@Post.Content" />

    <div class="modal fade" id="detailsModal" tabindex="-1" role="dialog" aria-labelledby="detailsModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="detailsModalLabel">Details</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div>
                        <label>@Localizer["description"]</label>
                        <textarea @bind="Post.Description" class="form-control" rows="3" name="description" />
                    </div>
                    <div>
                        <label>@Localizer["categories", true]</label>
                        <input @bind="Post.Categories" type="text" class="form-control" />
                    </div>
                    @if (Post.Id > 0)
                    {
                        <div class="input-group">
                            <label>@Localizer["cover"]</label>
                            <input type="text" class="form-control txt-upload" @bind="Post.Cover" name="cover" id="cover" readonly="" />
                            <span class="input-group-btn">
                                <button class="btn btn-secondary btn-upload" onclick="return fileManager.uploadClick('@UploadType.PostCover', @Post.Id);" type="button"> Select</button>
                            </span>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    [Parameter]
    public int PostId { get; set; }
    [Parameter]
    public EventCallback<string> OnUpdate { get; set; }

    protected HttpRequest Request { get; set; }
    protected string Cover { get; set; }
    protected PostItem Post { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Request = HttpContextAccessor.HttpContext.Request;
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("id", out var param))
        {
            PostId = int.Parse(param.First());
        }

        if (PostId > 0)
        {
            Post = await Http.GetJsonAsync<PostItem>($"posts/{PostId}?format=md", Request);
        }
        else
        {
            var blog = await Http.GetJsonAsync<PostItem>($"customfields/blogsettings", Request);
            Post = new PostItem { Cover = blog.Cover, Content = "", Title = "" };
        }
        Cover = $"background-image: url({AppSettings.SiteRoot}{Post.Cover})";
        StateHasChanged();
    }

    protected async Task SavePost(PostAction postAction)
    {
        try
        {
            var content = await JSRuntime.InvokeAsync<string>("commonJsFunctions.getEditorValue", "");
            Post.Content = content;

            if (string.IsNullOrEmpty(Post.Title))
            {
                Toaster.Error("Post title required");
            }
            else if (string.IsNullOrEmpty(Post.Content))
            {
                Toaster.Error("Post content required");
            }
            else
            {
                PostItem saved;
                if (Post.Id == 0)
                {
                    var authState = await AuthenticationStateTask;
                    Post.Author = await Http.GetJsonAsync<Author>($"authors/{authState.User.Identity.Name}", Request);

                    Post.Slug = GetSlug(Post.Title);
                    Post.Description = Post.Title;

                    await Http.PostJsonAsync<PostItem>($"posts", Request, Post);
                    var model = await Http.GetJsonAsync<PostModel>($"posts/byslug/{Post.Slug}?format=md", Request);
                    saved = model.Post;
                }
                else
                {
                    var item = await Http.GetJsonAsync<PostItem>($"posts/{Post.Id}?format=md", Request);

                    item.Content = Post.Content;
                    item.Title = Post.Title;
                    item.Description = Post.Description;
                    item.Categories = Post.Categories;

                    if (postAction == PostAction.Unpublish)
                        item.Published = DateTime.MinValue;

                    if (postAction == PostAction.Publish)
                        item.Published = SystemClock.Now();

                    await Http.PutJsonAsync<PostItem>($"posts", Request, item);
                    saved = await Http.GetJsonAsync<PostItem>($"posts/{item.Id}?format=md", Request);
                }

                if (saved != null && saved.Id > 0)
                {
                    if (postAction == PostAction.Publish)
                    {
                        var cnt = await Http.GetJsonAsync<int>($"notifications/sendnewsletters/{saved.Id}", Request);
                        if (cnt > 0)
                        {
                            Toaster.Success(string.Format(Localizer["email-sent-count"], cnt));
                        }
                    }
                    Toaster.Success("Saved");
                    Post = saved;
                    PostId = Post.Id;
                    StateHasChanged();
                }
                else
                {
                    Toaster.Error("Post was not saved");
                }
            }
        }
        catch (Exception ex)
        {
            Toaster.Error(ex.Message);
        }
    }

    protected async Task Publish()
    {
        Post.Published = SystemClock.Now();
        await OnUpdate.InvokeAsync("publish");
        await SavePost(PostAction.Publish);
    }

    protected async Task Unpublish()
    {
        await OnUpdate.InvokeAsync("unpublish");
        await SavePost(PostAction.Unpublish);
    }

    protected async Task Save()
    {
        await OnUpdate.InvokeAsync("save");
        await SavePost(PostAction.Save);
    }

    protected async Task Remove(int id)
    {
        try
        {
            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"{Localizer["confirm-delete"]}");
            if (confirmed)
            {
                var item = await Http.GetJsonAsync<PostItem>($"posts/{id}", Request);
                await Http.RemoveAsync($"posts/remove/{id}", Request);

                Toaster.Success("Removed");
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Toaster.Error(ex.Message);
        }
    }

    protected string GetSlug(string title)
    {
        string slug = title.ToSlug();
        PostItem item = GetBySlug(slug);
        if (item != null)
        {
            for (int i = 2; i < 100; i++)
            {
                slug = $"{slug}{i}";
                if (GetBySlug(slug) == null)
                {
                    return slug;
                }
            }
        }
        return slug;
    }

    private PostItem GetBySlug(string slug)
    {
        try
        {
            var result = AsyncHelper.RunSync(() => Http.GetJsonAsync<PostModel>($"posts/byslug/{slug}", Request));
            return result.Post;
        }
        catch
        {
            return null;
        }
    }
}
