@inject IJSRuntime JSRuntime
@inject IJsonStringLocalizer<Counters> Localizer
@inject IHttpContextAccessor HttpContextAccessor
@inject CustomHttpClient Http

@if (Totals != null)
{
    <div class="app-widget app-widget-welcome">
        <div class="row">
            <div class="col col-md-8 dash-cnt">
                <div class="dash-clock">
                    <span id="clock"></span>
                </div>
                <div>
                    <span id="clock-day"></span>, <span id="clock-month"></span>
                </div>
            </div>
            <div class="col col-md-4 dash-cnt"></div>
        </div>
        <div class="row stats">
            <div class="col dash-cnt">
                <h3 class="mb-0">@Totals.PostCount</h3>
                <small>@Localizer["posts", true]</small>
            </div>
            <div class="col dash-cnt">
                <h3 class="mb-0">@Totals.ViewsCount</h3>
                <small>@Localizer["view", true]</small>
            </div>
            <div class="col dash-cnt">
                <h3 class="mb-0">@Totals.SubsriberCount</h3>
                <small>@Localizer["subscribers", true]</small>
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    [Parameter]
    public EventCallback<string> OnUpdate { get; set; }
    protected HttpRequest Request { get; set; }

    public Totals Totals { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Request = HttpContextAccessor.HttpContext.Request;
        await Load();
    }

    public async Task Load()
    {
        var authState = await AuthenticationStateTask;
        Totals = await Http.GetJsonAsync<Totals>($"analytics/counts", Request);
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await JSRuntime.InvokeAsync<string>("commonJsFunctions.startClock", "");
    }
}
